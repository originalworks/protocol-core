import subprocess
import logging

logger = logging.getLogger()
logger.setLevel(logging.INFO)

def run_command(command):
    command_list = command.split(' ')

    try:
        logger.info("Running shell command: \"{}\"".format(command))
        result = subprocess.run(command_list, stdout=subprocess.PIPE);
        logger.info("Command output:\n---\n{}\n---".format(result.stdout.decode('UTF-8')))
    except Exception as e:
        logger.error("Exception: {}".format(e))
        return False

    return True

def lambda_handler(event, context):
    bucket_name = event['Records'][0]['s3']['bucket']['name']
    object_key = event['Records'][0]['s3']['object']['key']

    print(f"Triggered by file: {object_key} in bucket: {bucket_name}")
    
    if "/" in object_key:
        namespace, msg_date, *rest = object_key.split("/")
        batch_folder = "/".join((namespace, msg_date))
    else:
        batch_folder = ""

    print(f"Batch folder determined: {batch_folder}")
    # Download files from s3
    run_command(f'/opt/aws s3 sync s3://{bucket_name}/{batch_folder}/ /tmp/batch/{batch_folder}')
    
    # Run OWEN
    run_command(f'/opt/owen_cli/owen_cli /tmp/batch/{namespace}')
    
    # Print message in json format
    run_command(f'cat /tmp/output_files/{msg_date}.json')
    
    # Cleanup
    run_command(f'rm -rf /tmp/batch')
    run_command(f'rm -rf /tmp/output_files')


